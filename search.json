
[

  {
    "title": "Animations",
    "url": "/animations/",
    "content": "Coming soon…",
    "category": "General"
  },

  {
    "title": "Create your first experience",
    "url": "/create-your-first-experience/",
    "content": "Create your first experienceTo get a grasp of how the Unity editor works we will create a simple experience with a flying creature emitting a sound.Find your modelUnity is not a modelling tool, you need to import models from elsewhere. However, that doesn’t mean you need to create all models yourself.   There are tons of good sites for finding 3D models, both free and paid.Good 3D model marketplacesTurbosquid, the Marks &amp; Spencer of 3D models. High quality but often expensive. https://www.turbosquid.com/CGTrader, the Lidl of 3D models. Affordable and with a great selection, but there’s a lot of crap as well. https://www.cgtrader.com/GrabCAD Library, the thrift shop of 3D models. Here you can find anything from ugly vases to accurate egnineering models of the ISS. https://grabcad.com/libraryFileformatsStandard 3D model formats for Unity is OBJ and FBX, while certain others can be used as well.   OBJ: a great format for static models.FBX: can contain animations, and is the most common format for game development.In most 3D market places you can toggle search results by file format.Let’s find a model  Go to https://www.cgtrader.com/.  Create an account (unfortunately required on all 3D libraries.)  Search for something, like dragon, butterfly or tuna.  Toggle “Free” and set Formats to Autodesk FBX.  Press “Download.”  You need to wait 20 seconds for some stupid reason.  Unzip it.Here is a link to a free Tuna modelImport your model into Unity  Create a new folder in your Project Window by right clicking in the empty area of the window, choosing Create &gt; Folder.  Give it the name of your project, or what ever makes sense in your context.  Double click the folder to enter it.  Drag and drop it from Finder (or Explorer) into your empty folder in Unity.   You should now see your downloaded model inside the project window. Add the object to your scene.  Drag and drop it from your folder in the project window to the hierarchy to place it in the scene.   You should now see the 3D model in your scene.   Check the size of the model. Sometimes 3D models imported into Unity have very different scale. Unity’s default unit is meters, so if the object is modelled in millimeters it will be larger than it should.          An easy way to check the size is to create a default cube in the scene. Those are always 1x1x1 meters.      Right click in the Hierarchy and select 3D Object &gt; Cube to create a cube.       You can see that the Tuna is a realistic scale. However, it might be a bit large to see in AR. Let’s make it half the size for clarity.       Select the model in the Hierarchy and find the Transform component in the Inspector.        Change the scale to 0.5 on all axises. (Tip: toggle the little chain icon to the left of the scale to keep the proportions.)      Delete the Cube, as we don’t need it anymore. Select it and press cmd + delete (ctrl + delete on Windows.)      Add an audioclipUnity works with most common audio formats, like WAV and MP3. Unity will compress all audio when building an experience. For experiences where audio is essential you want to avoid double-compression, so then a lossless format like WAV is preferable.  Find an audioclip you would like to use, and import it to your project folder in the same way as you did with the 3D model.   Create an Audio Source. An Audio Source is a virtual speaker in space.          In your Hiearchy, right click and select ‘Create Empty’. This creates an empty gameobject, which is a type of entity that doesn’t exist in the real world; an object with nothing but a position, rotation, and scale.        Name it ‘AudioSource’ or something similar, so that you can keep track of it.      Select the ‘AudioSource’ object.      In the Inspector, press Add Component.       Search for Audio Source and press it.      Now you have added an AudioSource component to your empty object.      In the little slot for AudioClip, press the circle to the left.        Double click the audio clip you imported to Unity earlier to the audio source.        Change the Spatial Blend of the AudioSource to 3D to turn it into 3D sound, ie sound that gets lower the further you go from it.      In 3D Sound Settings, change the Max Distance to e.g 3 meters, so it will be easier to perceive the difference.      Your AudioSource should now look like this.        Play your scene to test it.  Press the big play button in the top. Unity will load for a while.   Select the Camera.   Move the Camera around with the arrows. You should hear the sound get louder as you approach your 3D model, and lower as you go away from it.          DON’T FORGET TO UNPLAY! When in Play Mode, no changes to your scene are saved. It is very easy to forget this.      Add an animation to your model.If you want a model with animations, add the search parameter ‘Animated’ on any of the 3D market places. The Tuna fish used above has an animation in the model.  You can see if the model has imported animations correctly by selecting the model in the Project window, and then looking in the animation tab in the inspector. If there are animations you can play them there to see how they look.  Continuing soon…Save your sceneRemember to save your scene when you are done, so you don’t loose your work. Most things you do in Unity is saved automatically as you are working directly towards the project folder. However, the scene is not saved automatically. Any arrangement of objects, audiosources and tuna fishes that you have made in your scene need to be saved.Models: Snail by Rafael Rodrigues, Grass by MauroGonzalezA, Flowers by Vish4MoreCC License",
    "category": "General"
  },

  {
    "title": "Dialogue System",
    "url": "/dialogue-system/",
    "content": "XREF Dialogue SystemThe Dialogue System is a tool for creating interactive conversations in your Meadow experiences. It allows you to create branching dialogues with multiple choices and responses, and  create your own RPGs.Your dialogue tree is constructed from a .tsv sheet with a list of lines of dialogue, each with a unique ID. You can add as many languages as you want, the system will automatically detect the system language and use the correct one. If the system language can’t be found, it will default to english.Dialogue System Properties:Texts  Text Asset: TextAsset - A TextAsset with a .tsv file that contains the dialogue.  Use URL: bool - If true, the dialogue will be fetched from a URL.  URL: string - The URL to fetch the dialogue from. Needs to be a publicly available csv file. See section “Use the Dialogue System with a URL” for more information.UI  UIDocument: UIDocument - The UI that will be used to display the dialogue.  Default Visual Asset VisualAsset - The visual asset that will be used to display the dialogue. Leave empty to use the visual asset referenced in the UIDocument.  Visual Tree Assets List&lt;VisualAsset&gt; - A list of visual assets that can be used to display the dialogue, if you want to use different ones for different sections. You can switch between these in the visual scripting.Audio  Audio Source: AudioSource - The audio source that will be used to play the dialogue audio.  Audio Clips: List&lt;AudioClip&gt; - A list of audio clips that will be used to play the dialogue audio, each corresponding to one line of dialogue.Debug  Override Language: string - Specify which language you want to use. If left empty, the system will use the system language.Using the Dialogue System  Add the XREFDialogue component to any game object in your prefab.  Create a UIDocument and add it to the UIDocument field in the XREF.DialogueSystem component. This is the UI that will be used to display the dialogue. It can be added to any game object.  Add a VisualAsset to the UIDocument. You can create one yourself, or use a default one located in packages/XREF.Experiencebuilder/Runtime/Dialogues/VisualTreeAssets/default. To create your own visual asset, see section “Create your own visual asset”.  Add a Panel Settings to the UIDocument. You can create one yourself, or use a default one that you find when clicking the little circle next to the Panel Settings field.  Add your dialogue tsv to the TextAsset field in the XREF.DialogueSystem component. You can also use a URL to fetch the dialogue from. See section “Use the Dialogue System with a URL” for more information.  Create your dialogue tree in visual scripting. See section “Create your dialogue tree” for more information.Create your dialogue treeThe XREF Dialogue System comes with a range of nodes for you to build dialogue trees. All nodes are found in XREF &gt; Dialogues among the visual scripting nodes.Here is an example of a basic dialogue tree:In this example, the dialogue starts with a Question with Two Optionsnode, the line that is said is greeting. The two options are answerOne and answerTwo. This is displayed to the user with one line with the text in greeting and then two buttons, each with the text in answerOne and answerTwo. Depending on which of these buttons the user press, the response is either responseOne or responseTwo.In each node you can either specify an ID that takes the line from a .tsv file, or you can specify the line directly in the node.List of nodes:Say Line - Prints a line to the user.  Game Object: GameObject - The game object with the XREFDialogue component. Use this to reference the game object the visual scripting is on.  Line: string - The line you want to say, or the ID of the line in the .tsv file.  Duration: float - The duration the line will be displayed in seconds. If 0, the line will be displayed continuously.Question with N Options - Asks a question to the user with N options. There is currently the choice of 1, 2 or 3 options.  Game Object: GameObject - The game object with the XREFDialogue component. Use this to reference the game object the visual scripting is on.  Line: string - The line you want to say, or the ID of the line in the .tsv file.  Options X: string - The text of the option, can be referenced directly or through an ID in the .tsv file. X is the number of the option.  Duration: float - The duration before the user can press either of the buttons.  Port: Option X: Flow - The port that will be triggered when the user presses the button for option X.Say Line Custom Property - Prints a line to the user on a specific Label element in your visual asset.  Game Object: GameObject - The game object with the XREFDialogue component. Use this to reference the game object the visual scripting is on.  Line: string - The line you want to say, or the ID of the line in the .tsv file.  Property: string - The Visual Asset property you want to display the text on.  Duration: float - The duration the line will be displayed in seconds. If 0, the line will be displayed continuously.Set Visual Asset - Sets the visual asset used by your UIDocument.  Game Object: GameObject - The game object with the XREFDialogue component. Use this to reference the game object the visual scripting is on.  Visual Asset: VisualAsset - The visual asset you want to use.  Set Enabled: bool - If true, the visual asset will be enabled. If false, it will be disabled.Create a Dialogue tsvIn any text editor, create a .tsv file where the first row contains the languages you want to use. The first column should contain the ID of the line, and the following columns should contain the dialogue in the corresponding language.Example:            ID      English      French      Swedish      Spanish              greeting      Hi How are you      Salut, comment ça va ?      Hej, hur mår du?      Hola, ¿cómo estás?              answerOne      I’m good      Je vais bien      Jag mår bra      Estoy bien              answerTwo      I’m not so good      Je ne vais pas très bien      Jag mår inte så bra      No estoy muy bien              responseOne      Good to hear      Content de l’entendre      Gott att höra      Bueno oír eso              responseTwo      I’m sorry to hear that      Désolé de l’entendre      Tråkigt att höra      Lo siento escuchar eso      You can use which languages you want. The system will automatically detect the system language and use the correct one. If the system language can’t be found, it will default to english.It is good practice to use human readable ID’s for the lines. It will make it easier to keep track of the dialogue and you don’t need to cross reference everytime you forgot what line b1c9 was.Please note: Unity does not recognize .tsv files as text assets by default. You need to change the file extension to e.g. .csv and then import it, to trick Unity into thinking it’s a text file. This doesn’t change the content of the file.Use the Dialogue System with a TextAsset  Save your .tsv file to disk.  Due to a limitation in Unity, you need to change the file extension to .csv before importing it. This does not change the content of the file.  Import the .csv file to your project. Unity will display it as a TextAsset. Place it in the folder of your experience to make sure it’s included in the asset bundle.  Reference the TextAsset in the XREF.DialogueSystem component in the Text Asset field.Use the Dialogue System with a URL  Publish your tsv file to a publicly available URL.  Reference the URL in the XREF.DialogueSystem component in the URL field. Toggle the Use URL bool to true.This is the process for publishing your tsv if you are using Google Sheets:  Go to File &gt; Share &gt; Publish to the web.  Choose Entire Document and Tab-separated values (.tsv) as the format.  Press Publish.  Copy the link and use it in the URL field in the XREF.DialogueSystem component.  Any changes you do to the Google Sheet is automatically reflected in your experience.Create your own visual assetYou can create and use your own visual asset to display the dialogue.If you want to be able to use the Say Line you need to add a Label element to your visual asset with the name text. You can use another name, but then you need to specify the name in the Say Line Custom Property node.If you want to be able to use the Question with N Options you need to add a Button element to your visual asset with the name optionX for each option, e.g. Option0, Option1, Option2.You can also make a copy of the default visual asset and modify it to your liking.Using Audio ClipsThe dialogue system can play audio clips for each line of dialogue. You add audio clips to the Audio Clips list in the XREFDialogue component.  Add an AudioSource somewhere in your prefab. Reference it in the XREFDialogue component in the Audio Source field. The AudioSource is the virtual speaker in space that will play the audio clips. If your dialogue will be spoken by a virtual character, place the audio on the character’s head or mouth to make use of Unity’s spatial audio.  You don’t need to do anything with the AudioSource component, but if you want to utilize spatial audio you need to change Spatial Blend to 3D and set the Max Distance to a value that makes sense in your experience, often around 5 meters to make it noticable.  Add your audio clips to the Audio Clips list in the XREFDialogue component.  For each list item, add a string and an AudioClip. The string is the ID of the line in the .tsv file that you want to play the audio for. This system is in place so that you may easily change audio clips during testing, without having to rename them. You do not need to have one audio clip for every line in your dialogue, only the ones with a corresponding audio clip will be played.Please note: Meadow currently does not support separate audio clips for different languages. Let us know if you need this feature, and we’ll add it.Example using the dialogue tree from the previous section:",
    "category": "General"
  },

  {
    "title": "Experience Component",
    "url": "/experience-component/",
    "content": "Experience ComponentThe Experience component is a core part of Meadow, which tells the platform that this is an experience that should be displayed in the app. It holds all the settings that define how your experience should be presented.Position  Facing Direction: Determines the initial facing direction of the experience. Options include:          User: Faces the user’s current direction. Non-geospatial experiences only.      North: Aligns the experience to face geographic north. Geospatial experiences only.        Placement Type: Determines how the experience is initially placed in the AR space. This is set in the webapp and cannot be changed in the Unity editor.          In Front of Camera: Places the experience in front of the camera.      Geospatial: Places the experience at a specific geographic location using Google Visual Positioning System.            Placement Distance: The distance at which the experience is placed when using the “In Front of Camera” placement type.    Reposition Type: Determines how the experience should be repositioned as location data improves. For geospatial and experiences who use Vertical Positioning: Floor.          None: No repositioning.      Smooth: Smoothly moves the experience to the new location.      Instant: Instantly jumps the experience to the new location.        Vertical Positioning: Specifies how the experience should be positioned vertically:          None: No vertical positioning. The experience 0,0,0 will be at the level of the device.      Floor: Positions the experience 0,0,0 on the ground using plane detection.      Altitude: Uses altitude data from location services. This can be inaccurate and should be used with caution.        Reposition Threshold: The minimum distance (in meters) between the current and new location required to trigger repositioning.Audio  Override Mute Switch: When enabled, this setting overrides the mute switch on iOS devices, ensuring audio playback even when the device is muted.AR Session  Camera Facing Direction: Sets the initial camera direction:          World: Uses the rear-facing camera.      User: Uses the front-facing (selfie) camera.      Planes      Use Plane Manager: Enables or disables plane detection. This is enabled by default if you use Vertical Positioning: Floor.        Plane Prefab: The prefab used for detected planes. If empty a default plane prefab with a Mesh Collider will be used.        Use Floor Plane: When enabled, creates a large plane aligned to the lowest detected horizontal plane.        Floor Prefab: The prefab used to visualize the floor plane. If empty a default plane prefab with a Mesh Collider will be used.        Plane Detection Mode: Specifies which types of planes to detect (horizontal, vertical, or both). Only detect the planes you need. Plane detection is performance-intensive and should be used sparingly.  Point Cloud      Use Point Cloud Manager: Enables or disables the AR subsystems point cloud visualization.        Point Cloud Prefab: The prefab used to visualize each point.  AR Camera Background      Use AR Camera Background Texture: Enables or disables the use of the camera feed as a background.        AR Camera Background Mode: Sets the rendering mode for the AR camera background (CPU or GPU).  OcclusionAR Occlussion functions differently depending on platform, and is split into platform-specific settings. Keep in mind that occlusion is performance-intensive.  Use Occlusion: Enables or disables occlusion.  Environment Depth Mode: Configures the depth estimation for enviroment mode. This option usually looks bad in outdoor environments.  Temporal Smoothing: Enables or disables temporal smoothing for occlusion.  Human Segmentation Stencil Mode: Configures the quality of human segmentation for stencils.  Human Segmentation Depth Mode: Configures the quality of human segmentation for depth.  Occlusion Preference Mode: Sets the preference for environment or human occlusion.ReflectionsPlatform-specific reflection settings:  Use Reflections: Enables or disables environmental reflections.  Automatic Placement: Enables or disables automatic placement of reflection probes.  Environment Texture Filter: Sets the filtering mode for environment textures.Device  Increase Screen Brightness: When enabled, this setting increases the screen brightness to maximum for better visibility.Performance      Use Performance Manager: When enabled, this will trigger a Visual Scripting event when the device FPS reaches the specificed treshold.        Target FPS Android: The target frame rate for Android devices.        Target FPS iOS: The target frame rate for iOS devices.  Geofencing      Use Geofencing: When enabled, this feature prompts users to return to or leave the content area based on their distance from the starting position.        Geofencing Radius: The distance (in meters) from the starting position at which geofencing notifications are triggered.        Geofencing Start: The delay (in minutes) before geofencing becomes active.  Lighting  Enable Default Directional Light: When enabled, this setting adds a default directional light to the scene. Untoggle this if you use your own lighting setup.Legacy settings  Settings: Use a legacy Content Settings file. This is deprecated and will be removed in future versions.Public Methods  GetLocationDataValue(string propertyid, out object value, out Type type): Retrieves location-specific data and its type based on the provided property ID.",
    "category": "General"
  },

  {
    "title": "Experience Linking",
    "url": "/experience-linking/",
    "content": "Experience LinkingThe Experience Linking system allows you to connect multiple experiences together, enabling your audience to seamlessly jump from one experience to another. This is perfect for creating multi-level games, connected artworks, or building your own exhibition within Meadow. You could even create your own mini-Meadow within Meadow, the meta possibilities are endless…The system can be used in two different ways:      Object Triggers: Use GameObjects in your experience to trigger the transition to another experience. For example portals or doors that trigger the transition to another experience. When approaching, the user will see a small popup with the “Enter Experience” button that they can press to enter the next experience. Perfect for creating interactive installations or guided tours.        Visual Scripting Triggers: Use visual scripting nodes to load another experience user interactions or game events. Perfect for creating multi-leveled games. Each level is a distinct experience on Meadow that you load at specific points in your game logic.  Components OverviewThe Experience Linking system consists of two main components:XR Experience LinkerThe central manager component that handles detection and triggering of experience links. This component continuously checks if the user is close to any experience link objects.Experience LinkIndividual components attached to objects that act as portals or triggers to other experiences. Contains a reference to the experience ID of the connected experience.Setting Up Experience Linking with Object Triggers1. Add the XR Experience Linker  Add the XR Experience Linker component to any GameObject in your experience (typically a manager object).  Configure the Marker Trigger Range - this determines how close the user needs to be to a link object before it becomes active (e.g., 10 meters).  The component will automatically handle detection and user interaction feedback, including haptic vibration when a link becomes active.2. Create Experience Link Objects  Create or select a GameObject that will serve as your triggers (like a portal, door, or an artwork).  Add the Experience Link component to this GameObject.  Configure the Experience Link properties:          Type: Set to Experience for linking to other Meadow experiences. You can set it to Exhibition to link to a Meadow Exhibition (Enterprise only).      ID: Enter the unique identifier of the target experience you want to link to. You can find this in the webapp, it’s the string of characters in the url. E.g: in https://app.meadow.space/e/-Nc8E1l1aTknOBEahAin the ID is -Nc8E1l1aTknOBEahAin.      Get Metadata On Awake: Enable this to automatically fetch experience information when the component starts      3. Register Links with the Linker  In the XR Experience Linker component, expand the Links list.  Add each GameObject that has an Experience Link component to this list.  Make sure all your link objects are included in this list, or they won’t be detected.Setting Up Experience Linking with Visual Scripting NodesComing soon…Best PracticesPortal Placement: Position experience links at natural transition points - doorways, paintings, interactive objects, or end-of-level areas.Visual Clarity: Make it obvious to users that an object is interactive. Use glowing effects, animations, or clear visual indicators.Common Use CasesMulti-Level Games: Create a hub world with portals to different game levels or challenges.Art Exhibitions: Link related artworks or create guided tours that flow from one piece to another.Storytelling: Build branching narratives where users can choose different story paths through experience links.Educational Content: Create learning journeys that connect related topics or progressive difficulty levels.Virtual Museums: Build your own curated collection of experiences with thematic connections.TroubleshootingLinks Not Detected  Ensure all link GameObjects are added to the Links list in XR Experience Linker  Check that link objects have colliders for raycast detection  Verify the trigger range is appropriate for your experience. If the trigger is high up in the air a trigger range of 1m might not be sufficient.Metadata Not Loading  Check that the experience ID is correct and the target experience exists  Ensure Get Metadata On Awake is enabled if you want automatic loading",
    "category": "General"
  },

  {
    "title": "File Formats",
    "url": "/file-formats/",
    "content": "Coming soon…",
    "category": "General"
  },

  {
    "title": "Image Tracking",
    "url": "/image-tracking/",
    "content": "Image TrackingMeadow allows you to create experiences that are triggered by images. This is a way to create interactive XR experiences that are triggered by posters, paintings, or any other image.Import and Prepare ImagesThe images you want to track need to be imported into your experience and included in your asset bundle.  Import the images you want to track into your project. Make sure to only use .png or .jpg images. Please note .jpeg images are not supported, just change the extension to .jpg.  Make sure to enable the Read/Write option in the import settings for the images.Please note that you should not create a Reference Image Library in Unity. Meadow will create this automatically when you upload your experience.Add the Tracked Images componentThe TrackedImages components allows you to place prefabs on top of images.  Add the TrackedImages prefab to your main prefab. It can be on any GameObject.  For each image you want to track, add a new entry to the Image Prefab Pairs list.  Assign the image you want to track to the Image field.  Assign the prefab you want to place on top of the image to the Prefab field.  Specify the Size of the image in meters. This is the size of the image in the real world. For example an A4 is 0.21 x 0.297 meters.  Toggle Update Position and Update Rotation to update the position and rotation of the prefab when the image is moving.Using Visual Scripting Event OnTrackedImagesChangedYou can also use visual scripting to trigger logic when an image is tracked for more granular control.Parameters:  Added Images: List&lt;ARTrackedImage&gt; - New images added to the tracked images list since the last event.  Updated Images: List&lt;ARTrackedImage&gt; - Images that have been updated.  Removed Images: List&lt;ARTrackedImage&gt; - Images that have been removed from the tracked images list.Common IssuesInstantiated Prefab TransformMake sure the position of the prefab is set to 0, 0, 0, to place it in the middle of the image that is being tracked.Also, make sure the scale is set to something that the user can see. If the prefab is very large the user will not see it as it is instantiated since they are standing inside of it. For example, if the user is standing 1 meter away from the image that is tracked, and the prefab is larger than 1 meter in size, the user might not see it.Image is not recognizedMake sure that the image is set to Read/Write enabled in the import settings.",
    "category": "General"
  },

  {
    "title": "Home",
    "url": "/",
    "content": "Welcome to the Meadow ManualMeadow is a social platform for creating, publishing and distributing XR experiences. The platform allows you to upload Asset Bundles from Unity straight to the Meadow platform, to be available to anyone with the app installed.                                Quick Start Guide                            iOS App                            Android App                            Contact Us  Getting Started      1. Install Unity    Download and set up Unity with the required modules for Meadow development.        2. Set Up Meadow Studio    Install the Meadow Studio package and configure your development environment.        3. Create Your Experience    Build your first XR experience and prepare it for deployment.        4. Upload &amp; Publish    Deploy your experience to the Meadow platform for users to enjoy.  Key Features      Image Tracking AR    Create augmented reality experiences that respond to real-world images.        Dialogue System    Build interactive conversations and narrative experiences.        Visual Scripting    Create complex behaviors without writing code using Unity's visual tools.        Location-Based    Design experiences tied to real-world locations and GPS coordinates.  Platform StatusBeta AccessMeadow is currently in closed beta. We're actively looking for creators and new use cases. Contact us if you're interested in early access.",
    "category": "General"
  },

  {
    "title": "Install Meadow Studio",
    "url": "/install-meadow-studio/",
    "content": "        Use Meadow in an Existing ProjectIt is easy to use Meadow in an existing Unity project, you just need to install Meadow Studio and import the required packages.  Important: Meadow currently does not support custom C# scripts. This means that any custom C# scripts will need to be converted into Visual Scripting graphs.Download Meadow Studio  Go to: Download Meadow Studio (https://app.meadow.space/dashboard/meadow-studio).  Click Download (the large white button in the bottom of the page). Once downloaded, drag and drop the package into your project window.  You should now see the Meadow tab in the Unity editor.",
    "category": "General"
  },

  {
    "title": "Download and install the Meadow template project",
    "url": "/install-the-template-project/",
    "content": "Download and install the template project for UnityTo create and publish your experiences to meadow you need to install Meadow Studio and the two XREF packages in your project. To make it easier to get started we have created a template project that has everything already installed.Download the template project from GithubVia the Github website:  Go to https://github.com/untoldgarden/XREF_ExperienceBuilder.  Click the green “Code” button and press download zip.  Unzip it in a sensible location (e.g. Projects/UnityTutorial).Via the command line:  Open your terminal or command prompt.  cd to the directory where you want to download the project.  Run the following command to clone the repository:    git clone https://github.com/untoldgarden/XREF_ExperienceBuilder      Add the template project to Unity Hub  Go to Unity Hub.  Click “Projects.”  Click on the little arrow to the right of “Add” and choose “Add project from disk”.   Navigate to where you cloned your project template.  Choose the root folder (e.g. XREF_ExperienceBuilder).  Press “Add Project.”  If you installed a different version than 6000.1 you need to tell Unity that you want to use that version instead.          Press the drop down under “Editor version” that has a little warning triangle next to it. .      Select your installed version of Unity.      Press “Open with…”      In the following dialogue, press “Change version.”      It will take some time to open the project, and then show a new dialogue, press “Continue.”        The project should open in Unity and look like this:",
    "category": "General"
  },

  {
    "title": "Installing Unity",
    "url": "/installing-unity/",
    "content": "        Installing UnityYour Unity installs and projects are managed through an application called Unity Hub. You need to download this software to install and use Unity. It’s similar to Adobe Creative Cloud.  Download Unity hub from https://unity.com/download  Install it  Open the Hub, create an account, and login  Install an editor (Unity publishes new versions weekly). You can install the latest suggested version for Unity 6000.0 (We do not currently recommend versions 6000.1), but make sure it’s Unity 6 as older versions will not work with Meadow. If you plan to use visual effects and/or shader graph make sure to download 6000.0.1, as newer versions might not display the effects correctly.  When prompted, install iOS and Android modules. At the moment both are needed even if you only plan on building for one platform.  Get a license. Use the free personal one. You do not need to use the PRO version to use Meadow.",
    "category": "General"
  },

  {
    "title": "Map Marker",
    "url": "/map-marker/",
    "content": "Map MarkerMeadow allows you to create site-specific experiences that are placed on a map. To show your experience on the map you can upload a custom map marker, that can be anything from a simple icon to a 3D model.Create a Map Marker using an image  Create a new folder in your project, outside of your main experience folder.  Assign this folder to a new Asset Bundle, call it e.g. yourprojectnamemapmarker or whatever you want. The name does not mater, but avoid dashes or special characters as these are not allowed in the Asset Bundle name.  Create an empty GameObject in your scene.  As a child to this GameObject, create a quad facing upwards.  Move it up a bit so it’s not intersecting with the map itself, which is at 0.  Import the icon you want to use to your project.  Assign this as the texture on a new material.  Assign this material to the quad.  Drag the empty gameobject to your Map Marker folder in the project view to create a prefab.  Use Meadow Studio to upload your Map Marker to your experience.Create a Map Marker using a 3D model  Follow step 1-3 in the previous section.  Import your 3D model.  Drag it to the scene as a child of the empty GameObject.  Position and scale it as you want it to appear on the map. Don’t make it too big or too small. A good size is between 1 and 2 meters.  Get creative and add in any fun animations, reflections, or particle effects you’d like! Bear in mind if you are using a particle effect, the scaling mode must be set to hierarchy to work properly.  Assign the tag MapMarker to your empty GameObject. This is for the system to know that this is the prefab that should be used as the marker.  Follow step 9-11 in the previous section.",
    "category": "General"
  },

  {
    "title": "Navigate the Unity editor",
    "url": "/navigate-the-unity-editor/",
    "content": "        Navigate the Unity editorUnity is like a theatre stage, or film set, where all the components of your experience come together. It will not do anything unless you put great assets and actors following a good script on it.  Visual scripting is your script writing and project planning. What should happen where and when, and how? For meadow we use visual scripting, you do not need to write any code.  The asset creation is your prop / set / costume construction. This doesn’t happen on the stage (Unity), but happens in a separate workshop (Blender, photoshop, etc.)  Meadow is your venue or audio/video tech, i.e. what’s needed for you to distribute what you see to an audience.Starting UnityWhen you first open the template project the window will look something like this. The Unity editor is divided into many different windows. The six most important are:Project WindowThe Project Window acts as your central hub for all the assets in your Unity project. It mirrors the contents of your project’s folder on your computer’s file system. Any modifications made within this window are automatically saved and reflected in the corresponding Finder (or File Explorer on Windows) directory, and vice versa.Is the same as:Scene ViewThe Scene View is your interactive canvas where you create your experience. Here, you can place, arrange, and manipulate objects. This view offers a variety of tools and perspectives, allowing you to navigate and edit your scene from different angles and scales.Navigation in Scene ViewZooming:  Mac: Use two fingers to scroll up or down on the trackpad.  Windows: Use the scroll wheel on your mouse.Rotating:  Mac: Hold down the ‘Option’ key, click and drag with your mouse or trackpad.  Windows: Hold down the ‘Alt’ key, click and drag with your mouse.Dolly (Pan):  Mac: Hold down both the ‘Option’ and ‘Command’ keys, then click and drag with your mouse or trackpad.  Windows: Hold down both the ‘Alt’ and ‘Middle Mouse Button’, then drag with your mouse.Game ViewThe Game View provides a preview of your experience. It renders the game from the perspective of the active camera. In AR, the users phone camera is the active camera, so this is not an accurate rendition of what the user will see. Move the camera around to simply mimic user behaviour in your scene.Hierarchy WindowThe Hierarchy Window displays all the game objects present in your experience, organized in a tree structure. Each item in the hierarchy represents a game object, and child objects can be nested under parents, establishing a clear and manageable structure.   By default, Unity will have placed a Camera and a Directional Light here.  In the hierarchy, you are working in what is called a Scene. A scene in Unity works pretty much like a scene in any other context. If you create a game for example, every level might be a scene. In this example, and in most other cases, you only need to work in one scene.**IMPORTANT: **The scene is the only thing that isn’t saved automatically in Unity. You need to manually save the scene by pressing cmd + s (ctrl + s on Windows.) If you do not do this, the way you have configured your hierarchy will be lost.Inspector WindowThe Inspector Window provides detailed information and customizable properties for the currently selected game object or asset. Here, you can view and modify attributes such as position, rotation, scale, and any attached components or scripts. If you select the ‘Camera’ object from your hierarchy, you will see that it has a Transform component that gives it a position, scale and rotation, as well as a Camera component, that renders a view of the scene to the Game View.Console WindowThe Console Window serves as Unity’s output log, displaying messages, warnings, and errors generated by your game and scripts. It is a valuable resource for debugging and troubleshooting, helping you identify and resolve issues during development.There might be errors in your console when you first open the template project. Unity sometimes throws errors when you open it, those are usually nothing to worry about.  Press the little button called ‘Clear’ in the top right corner of the window.  If all errors are gone, all is good and you are ready to start building.  If some errors persist, then something has gone wrong when setting up the project. Check the steps of ‘Install the Template Project’ again or reach out to support.  There might be many warnings. In normal programming, warnings are important to keep an eye on. But for game development, they are not (some might disagree).  Press the yellow warning triangle to hide all future warnings.",
    "category": "General"
  },

  {
    "title": "Networking and Multiplayer",
    "url": "/networking-and-multiplayer/",
    "content": "Coming soon…",
    "category": "General"
  },

  {
    "title": "Prepare your experience",
    "url": "/prepare-your-experience/",
    "content": "Prepare Your ExperienceTo upload your experience to Meadow you need to do a few things in Unity:  Add all your GameObjects as children to one root GameObject.  Add an Experience component to the root GameObject.  Turn the root GameObject into a prefab in your project folder.  Add the folder to an asset bundle.Here’s a detailed breakdown:Add your experience as children to an empty GameObject  In Unity, create a new empty object in your Hierarchy. This is the root object of your experience, that will contain all the other objects.  Important: Make sure that the root object is at position X = 0, Y = 0, Z = 0. Otherwise your experience will be placed in the wrong location in Meadow.  Select all the objects that you have created for your experience.  Drag them on top of the new empty object. This turns them into children to that object.  Important: Make sure to not include any cameras in your prefab. The camera is automatically created by Meadow when your experience is opened.  In programming, ‘child’ means an object that is below another object in a hierarchy. Conversely, ‘parent’ is an object that is above another in the hierarchy. And, ‘sibling’ is an object that is on the same level in the hierarchy. A ‘root’ object is the object that is at the top of a hierarchy, that has no further parents.    In the example above you see that both the tuna 3D model and the Audio Source are children to the newly created GameObject named MyExperience.Add the Experience component to your root objectExperience.cs is a script that tells the Meadow platform that this is an experience that should be displayed in the app.  Select the empty object you just created.  Press “Add Component”, search for Experience, and add it. The component is located in the namespace XREF.Set your experience settingsThe Experience component includes a number of settings which tells the Meadow app how your experience should be presented in the app. For a full list of settings, see the Experience component documentation.  Here are the most important settings:      Facing Direction:              User: Experience will open facing the user (non-geospatial only.)        North: Experience will face north (geospatial only.)                    Placement Distance:  Distance from the user at which the experience will be placed (non-geospatial only.)              Reposition Type:  Determines how the experience should be repositioned when positioning improves. (applies to geospatial or VerticalPositioning.Floor only.)        Vertical Positioning:              Floor: Experience is placed on the floor.        Altitude: Experience is placed based on GPS altitude (often inaccurate, use with caution.)            Add your experience to the project folderNow you need to add the experience you have created to your folder in the Project Window. When you do this, you create what is called a prefab. A prefab is a type of object that can be reused in different scenes, and also built as an asset bundle. Unity shows you that it is a prefab by changing the icon in the Hierarchy to a blue cube.  Select the root object of your experience (the one with the Content component.)  Drag it into the empty area of your folder in the Project Window.  You should now see a blue cube in your folder. This is a prefab of your experience and is what will be played in Meadow.  Important: Changes to the prefab in your scene is not automatically applied to the prefab in your project folder. You need to manually apply any changes by selecting the prefab in the scene, finding the little toggle called “Overrides” in the inspector, and then press “Apply all”. This is so that you can have different settings for your prefab in different scenes, but it’s not really useful for our purposes. If you have changed things in your experience but the changes are not showing in Meadow, then forgetting to apply overrides is most likely the reason.    To apply all overrides, use the following keyboard shortcuts:      On macOS: Press Cmd + Alt + A.    On Windows: Press Ctrl + Alt + A.  Add your files to an asset bundleNow we need to tell Unity that everything in this folder should be built into an asset bundle. Unity’s UX for this is a bit cumbersome, but you only need to do this once.  Navigate to your Assets folder in the Project Window.  Select your folder, but do not enter it.  In the bottom right corner, you see a teeny tiny text saying “Asset Labels.”  Press this text to see the asset bundle menu.   Press the foldout menu that currently says “None”.  Press new.   Give your asset bundle a sensible name so you can easily recognize it later. This tells Unity that every file in this folder should be built into this asset bundle. This is what you will upload to our platform.  Important:  Do not use spaces, special characters or capital letters in the name of your asset bundle. This will cause errors when loading it in Meadow. Name it something like “myexperience”, “mrsnail” or “thesquarelevelone”.Upload your experience using Meadow StudioYour experience is now ready to upload to Meadow! Follow the instruction here.",
    "category": "General"
  },

  {
    "title": "QR Codes",
    "url": "/qr-code/",
    "content": "QR CodesYou can create QR codes for your Meadow experiences to make them easily accessible to your audience. When scanned, these QR codes will direct users to your experience either in the Meadow app or guide them to download it if they haven’t already installed it.Using the Built-in QR CodeThe simplest way to get a QR code for your experience is to use the one automatically generated on the experience page:  Go to your experience in the Meadow dashboard      Click the “Public view” button in the top right corner to access the public-facing experience page        Locate the QR code displayed on the page      Right-click the QR code and select “Save Image” to download it      Creating Custom QR CodesYou can also create your own QR codes using any QR code generator:  Copy your experience URL: https://app.meadow.space/e/your-experience-id  Visit your preferred QR code generator  Paste the URL and generate your QR codeAdvanced URL OptionsInstant AR LaunchBy default, when users scan the QR code, they’ll be taken to the experience’s “About” page in the Meadow app. From there, they need to press “Enter Experience” to launch the AR view. You can modify this behavior:  Add ?i to the end of your experience URL to launch directly into AR mode  Example: https://app.meadow.space/e/your-experience-id?iUser FlowWhen a user scans your QR code, they’ll follow one of two paths depending on whether they have the Meadow app installed:Users with Meadow Installed  Scan QR code  Experience opens directly in the Meadow appUsers without Meadow Installed  Scan QR code  Opens webapp experience page  Press “Enter Experience”  Redirected to App Store/Google Play  Install Meadow  Scan QR code again to open experienceNote: We are working on implementing smart links that will remember the experience after app installation, eliminating the need to scan the QR code twice.Known Limitations  Some mobile browsers may not recognize the dynamic link in the QR code. In these cases, users will be redirected to the web app instead, where they can open the experience in the Meadow app.  We are actively working on improving QR code compatibility across different devices and browsers.Future UpdatesWe are developing additional QR code features that will be available soon:  QR code management system  Dynamic QR codes  Enhanced tracking and analyticsStay tuned for these upcoming features that will make it even easier to share your experiences.",
    "category": "General"
  },

  {
    "title": "Save System",
    "url": "/save-system/",
    "content": "Save SystemThe Save System allows you to track user progress through your Meadow experience by creating save points, measuring elapsed time, and storing custom data. This system is perfect for creating checkpoint-based experiences like urban audio walks, or building RPG-style games where user progress needs to be preserved between sessions.The save data persists across app sessions and is automatically saved when the user closes the app, goes to the background, or at regular intervals during gameplay.Save System Properties:Configuration  Save On Start: bool - Automatically starts tracking when the experience begins.  Auto Save: bool - Enables automatic saving at regular intervals.  Auto Save Interval: float - Time in seconds between automatic saves (default: 15 seconds).Automatic Save TriggersThe system automatically saves progress when:  The application is closed or paused  The experience object is disabled  Auto save interval is reached (if enabled)Using the Save System  Add the SaveManager component to any game object in your prefab.  Configure the auto-save settings based on your experience needs.  Use the visual scripting nodes to create save points and track progress throughout your experience.  The system will automatically use your experience ID.Save System FeaturesSave Points: Create named checkpoints in your experience that track elapsed time from when they were set.Custom Data Storage: Save custom data (strings, numbers) associated with your experience.Automatic Persistence: All data is automatically saved to device storage and restored when the experience is loaded again.Last Save Point Tracking: The system remembers which save point was set most recently, useful for implementing “Continue from where you left off” functionality.Create your save system logicThe Save System comes with a range of nodes for managing user progress. All nodes are found in XREF &gt; SaveSystem among the visual scripting nodes.Here is an example of a basic save system implementation in use in a RPG-style game:In this example, the experience starts by creating an initial save point, then sets checkpoints as the user progresses through the game.List of nodes:Start Experience Saving - Begins tracking the overall experience progress and creates a save point for total experience time.  Game Object: GameObject - The game object with the SaveManager component. Use this to reference the game object the visual scripting is on.Set Save Point - Creates a named save point that tracks elapsed time from the moment it was set.  Game Object: GameObject - The game object with the SaveManager component. Use this to reference the game object the visual scripting is on.  Save Point Name: string - A unique name for this save point (e.g., “level1_complete”, “checkpoint_forest”).  Overwrite Existing: bool - If true, overwrites any existing save point with the same name. If false, ignores the request if a save point already exists.  Mark As Last Save Point: bool - If true, marks this as the most recent save point for “continue” functionality.Has Save Point - Checks if a save point with the specified name exists and returns its elapsed time.  Game Object: GameObject - The game object with the SaveManager component. Use this to reference the game object the visual scripting is on.  Save Point Name: string - The name of the save point to check for.  Has Save: bool - Output indicating whether the save point exists.  Elapsed Time: float - Output showing the elapsed time for the save point (in seconds).Get Save Point Elapsed Time - Retrieves the elapsed time for a specific save point.  Game Object: GameObject - The game object with the SaveManager component. Use this to reference the game object the visual scripting is on.  Save Point Name: string - The name of the save point to query.  Elapsed Time: float - Output showing the elapsed time for the save point (in seconds), or 0 if the save point doesn’t exist.Get Last Save Point - Gets information about the most recently set save point.  Game Object: GameObject - The game object with the SaveManager component. Use this to reference the game object the visual scripting is on.  Has Save Point: bool - Output indicating whether any save point exists.  Save Point Name: string - Output showing the name of the last save point.  Elapsed Time: float - Output showing the elapsed time for the last save point (in seconds).Get All Save Points - Returns a list of all save point names that have been created.  Game Object: GameObject - The game object with the SaveManager component. Use this to reference the game object the visual scripting is on.  Save Point Names: List&lt;string&gt; - Output containing all save point names.Save All Save Points - Manually triggers a save of all current progress (normally happens automatically).  Game Object: GameObject - The game object with the SaveManager component. Use this to reference the game object the visual scripting is on.Custom Data StorageIn addition to the visual scripting nodes, the SaveManager component provides methods for storing custom data:**SaveCustomData(string key, T value)** - Save any serializable data with a string key.**GetCustomData(string key)** - Retrieve previously saved custom data.This is useful for storing game state, user preferences, or any other data that should persist between sessions.Common Use CasesCheckpoint System: Use Set Save Point when players reach important milestones, then use Get Last Save Point when they restart to continue from their progress.Level Completion Tracking: Create save points for each completed level and use Has Save Point to check what content the user has unlocked.Time-Based Saving: Use Get Save Point Elapsed Time to return to a specific point in for example an audio track.Session Restoration: Use the automatic saving features to seamlessly restore user progress when they return to your experience.Best PracticesMeaningful Names: Use descriptive save point names like “tutorial_complete” or “boss_defeated” rather than generic names like “save1”.Strategic Placement: Set save points at natural breakpoints in your experience - after tutorials, level completions, or major story beats.Progress Validation: Use Has Save Point to check if users have completed prerequisite content before allowing access to new areas.Please note: Save data is stored locally on the user’s device using Unity’s PlayerPrefs system. Data will persist between app sessions but may be lost if the user clears their app data or uninstalls the app.",
    "category": "General"
  },

  {
    "title": "Touch Interaction",
    "url": "/touch-interaction/",
    "content": "# Touch InteractionThe Touch Interaction Manager allows you to use touches from the user's device screen to manipulate your experience. This can be used for various interactive elements such as chess games, meditations where you stack snails, or intricate escape rooms. ## Documentation### Touch Interaction Manager Properties- **Detect Touch**: `bool` - Enable or disable touch detection.- **Enable Tap**: `bool` - Enable or disable tap detection.- **Enable Raycast**: `RaycastFlag` - Set the raycast mode (None, OnSingleTouch, OnMultipleTouch).#### Touch Settings- **Tap Length**: `float` - Duration of a tap in seconds (e.g., 0.1 = 100 ms). It's recommended to keep this value between 200 and 400. - **Map Touch Bottom**: `float` - Maps touch.y up from bottom. Essentially moves the touch point slighlty higher on the screen, which is useful for use cases where the user needs to see what they do.- **Map Touch Top**: `float` - Maps touch.y down from top. - **Min Touch Limit**: `float` - Screen Y limit below which raycasts are not sent.- **Max Touch Limit**: `float` - Screen X limit above which raycasts are not sent.#### Raycast Settings- **Named Layer Masks**: `List` - The list of different layer masks that you will use for raycasting.### Touch Events- **OnHit**: Triggered when a raycast from the first touch hits something in world space.  - Outputs:    - `hitPoint`: ValueOutput - The point in world space where the ray hit.    - `hitObject`: ValueOutput - The object that was hit by the ray.- **OnMultipleHits**: Triggered when several touch fingers hit things in world space.  - Outputs:    - `hitPoints`: ValueOutput (List) - The points in world space where the rays hit.    - `hitObjects`: ValueOutput (List) - The objects that were hit by the rays.- **OnNoHit**: Triggered when a raycast from the first touch gets no hit.  - Outputs:    - `Touch`: ValueOutput - Information about the touch that didn't result in a hit.- **OnFirstTouchEnd**: Triggered when the first registered touch ends.- **OnSecondTouchEnd**: Triggered when the second touch ends.- **OnTap**: Triggered when a tap is detected.  - Outputs:    - `hitPoint`: ValueOutput - The point in world space where the tap occurred.    - `hitObject`: ValueOutput - The object that was tapped.- **OnTouch**: Gives you direct access to all touches from the screen.  - Outputs:    - `Touches`: ValueOutput (List) - Information about all current touches.## ManualLet's create a simple game where you can move a snail around using touch input.### Set up Touch Interaction1. Add the `Touch Interaction Manager` component to any game object in your prefab.    - Enable \"Detect Touch.\"   - Set \"Enable Raycast\" to \"OnSingleTouch\" (we don't need to track raycasts from multiple fingers.)   - Add two named layer masks: one for the selected object and one for the static objects. Assign the objects to the appropriate layers.![Touch Interaction Manager](../images/touch-interaction-manager.webp)> **Note:** If you can't see many layers in the dropdown, you can add more layers in the Tags and Layers settings in Unity. Layers from 10 and up are available for use in Meadow.>>>> Add for example:> - SelectableObjects (10) - For the snail object.> - StaticObjects (11) - For the ground plane.>>> Meadow uses layer 9 for AR planes, and 0 for the default layer. Make sure to include these in your layer mask if you want to raycast against them. To include layer 9 you need to create that layer in the Tags and Layers settings in Unity.### Add Your Object1. Add your snail object as a sibling to the manager.2. Set it to one of the layers in the layer mask for selected objects.3. Ensure it has a collider component. The raycast hits are registered against colliders.![Add Snail Object](../images/touch-interaction-add-snail-object.webp)### Add Visual Scripting1. Add a Script Machine component to your manager object.2. Create a new Script Graph and assign it to the manager.3. Open the Script Graph and add these nodes:   a. Create a graph variable of type GameObject, name it \"selectedObject\".   b. Add an OnHit event node:   - Add a null check for the selectedObject.   - If it's null, assign the hit object (from hitObject output) to selectedObject.   - We have now selected the snail and instead want to raycast against the ground. Change the layer mask we register raycasts against to StaticObject.   - If it's not null, set the position of the selectedObject to the hit position (from hitPoint output) from the OnHit event.   c. Add an OnFirstTouchEnd event node:   - Set the selectedObject variable to null.   - Change the layer mask back to SelectedObject so we can select the snail again.![Visual Scripting](../images/touch-interaction-visual-scripting.webp)> **Tip:** Press 'cmd' and drag to create an group around a set of nodes. This is very useful for organizing your graph.### Set Up the Environment1. Add a plane to your scene as a stand-in for AR planes. 2. Set the plane to the same layer as defined in StaticObjects.3. This plane is just for testing in the Unity editor so keep it outside of your prefab.![Add Plane](../images/touch-interaction-add-plane.webp)### Testing Your Game1. To register touch events in the Unity editor, set the Game view to \"Simulator\".2. Play the scene and try moving the snail around by pressing and dragging it around on the plane.This basic setup can be easily expanded to create more complex interactions. Try setting up chess game that can be played in AR!## Common Issues### The object sinks into the ground when moved- The object will be moved to its pivot point. If the pivot is at the midpoint of the model on the Y-axis, the object may appear to sink into the ground when moved.- To fix this, set your object as a child of an empty GameObject and adjust its position upwards. Make sure to put the collider on the child object, as it's the object with the collider that is returned by the raycast hit.Pivot:![Object Sinking](../images/touch-interaction-pivot-point-1.webp)Object:![Object Sinking](../images/touch-interaction-pivot-point-2.webp)",
    "category": "General"
  },

  {
    "title": "Update Your Creator Profile",
    "url": "/update-creator-profile/",
    "content": "# Update Your Creator ProfileYour creator profile on Meadow is a public-facing page that showcases your work and helps you connect with other creators. It shows all your public experiences, and can be used by your audience to find your work.A creator profile is currently subject to approval by the Meadow team, to ensure that the content is appropriate for the platform. Please send us a message if you'd like to be public, and we'll get to it straight away. Please first update your profile with a user name, profile picture and a short bio.## Update Your Profile1. Go to the [Meadow console](https://console.meadow.space/).2. Log in with your Meadow account.3. Click on your profile picture in the top right corner.4. Click on `Profile`.![alt_text](../images/click-profile.webp \"Click profile\")5. Update your profile picture, user name, and bio.![alt_text](../images/unupdated-profile.webp \"Update profile\")6. All changes are saved automatically. ![alt_text](../images/profile-done.webp \"Updated profile\")",
    "category": "General"
  },

  {
    "title": "Updating XREF Packages",
    "url": "/update-packages/",
    "content": "# Updating XREF PackagesTo ensure you're using the latest features and improvements in your Meadow experiences, it's important to keep your XREF packages up to date. Follow these steps to update the XREF and XREF.ExperienceBuilder packages:1. Open Unity and load your project.2. Go to Window > Package Manager to open the Package Manager window.3. In the Package Manager, scroll down the list of packages until you find XREF and XREF.ExperienceBuilder.4. Select both XREF and XREF.ExperienceBuilder by holding Ctrl (Windows) or Cmd (Mac) and clicking on each package.5. With both packages selected, click the \"Update\" button that appears in the package details pane.![Updating XREF Packages](../images/update-xref-packages.webp \"Updating XREF Packages in Package Manager\")After clicking \"Update,\" Unity will download and install the latest versions of these packages. Once the update process is complete, you may need to restart Unity to ensure all changes take effect.## Regenerating Visual Scripting NodesAfter updating the XREF packages, it's crucial to regenerate the visual scripting nodes to access the latest nodes included in the update. Here's how to do it:1. Go to Edit > Project Settings to open the Project Settings window.2. In the left sidebar, scroll down and select Visual Scripting.3. In the Visual Scripting settings, click on the \"Regenerate Nodes\" button.This process will ensure that you have access to all the latest visual scripting nodes provided by the updated XREF packages.Remember to check for updates regularly and regenerate nodes after each update to take advantage of new features, bug fixes, and performance improvements in the XREF ecosystem.",
    "category": "General"
  },

  {
    "title": "Upload to Meadow",
    "url": "/upload-to-meadow/",
    "content": "        # Upload to Meadow {#upload-to-meadow}To upload your experience to Meadow you will use the Meadow plugin for Unity. If you are using the template project this is already installed, but if you are using your own project you will need to [install Meadow Studio](https://manual.meadow.space/install-meadow-studio/).Before you get started with Meadow Studio you need to create an account on Meadow and create an experience.## Create an account on Meadow Meadow is still in a closed beta, so your email need to be whitelisted by us before you can create an account. Contact support to get your email whitelisted.1. Go to: [https://app.meadow.space/](https://app.meadow.space/).![alt_text](../images/webapp-homepage.webp \"Meadow Homepage\")2. Press \"Login\" at the top right corner. ![alt_text](../images/webapp-login.webp \"Login\")3. Sign up with an email you have access to. >**Important:** The verification email sometimes ends up in the trash. Certain non-standard email providers and government accounts blocks our verification email, use a standard gmail or outlook address instead. >**Important:** Currently it's not possible to use spaces in your name. We are working on fixing this bug, until that's done, use a name without spaces.## Create your experience on Meadow1. Press your profile image, and then \"Dashboard.\"![alt_text](../images/webapp-logged-in.webp \"Logged in\")2. In the dashboard, go to the \"Experiences\" tab. Here you can and manage all your experiences.![alt_text](../images/webapp-experiences.webp \"Experiences\")2. On the top right, click \"+ New Experience.\"![alt_text](../images/webapp-new-experience.webp \"Details\")3. Fill in the Title, add an image, and add a description. You don't need to add anything apart from the title now, and can always edit these later.4. Skip past the Deploy section for now as we will handle this from Unity.5. In the \"Distribution\" section you can place your experience. You **do not** need to do this to test the experience, if you keep the toggle \"Available anywhere\" the experience can be opened at any location. If you want to place it somewhere and make it show up on the in-app map, search for a location and double click anywhere on the map. ![alt_text](../images/webapp-distribution-step.webp \"Map\")6. Placement Type decides how your experience will be positioned in the world. - **In Front Of Camera**: The experience will be placed in front of the camera when the user opens it, at the `Placement Distance` specified in the Experience component. - **Geospatial**: The experience will be placed at a physical location in the world using Google's Visual Positioning System, which uses Google Streetview to place it. Accuracy varies depending on location, but can be below 1 meter in ideal conditions.7. Save the experience as a draft for now. You can publish it later. ## Upload your experience using Meadow StudioNow it's time to upload your experience to Meadow. ### Login to Meadow Studio1. Find the Meadow tab in Unity and open the Meadow Studio window. 2. Log in with the details you used when first making your Meadow account. ![alt_text](../images/meadow-studio.webp \"Meadow Studio Experiences\")3. Here you will see all your experiences listed. Click refresh if something is not up to date. ### Upload to Meadow1. Open the experience you would like to upload to.2. In the drop down `Asset Bundle`, select the bundle you would like to upload. This is the bundle that you assigned to your project folder. [See instructions here.](https://manual.meadow.space/upload-to-meadow.html#add-your-files-to-an-asset-bundle)3. Specify if this is the Experience Bundle or the Map Marker Bundle. [See Map Marker instructions here.](https://manual.meadow.space/map-marker.html)4. Select the platforms for which you would like to upload the experience.5. Click Upload to Meadow.6. The process takes a while the first time it's done as Unity has some caching to do. Subsequent uploads will be faster.7. If you have more updates to publish later on, simply repeat this process to update again.![alt_text](../images/meadow-studio-upload.webp \"Meadow Studio Upload\")> **Important:** Make sure to choose the correct asset bundle and bundle type. >>>>Example: choose Asset bundle `myexperience` and Bundle type `Experience` to upload the experience for the asset bundle `myexperience` to Meadow.## Test your experience in the Meadow appYou are now ready to test your experience in the Meadow app! 1. Open the app on your device. 2. Press the profile icon in the bottom right corner. 3. Log into your Meadow account. > **Note:** There is currently a bug with pasting in your password, so you need to type it in manually. We apologize for the inconvenience, and are working on a fix for this.4. You will now see the experience listed on your profile. 5. Press the experience to open it.6. Press \"Enter Experience\" to open it in AR.## Add cocreators to your experienceYou can add collaborators to your experience to work on it together. This is great to be able to share it with team members or clients.1. When editing an experience in the web app, go to the tab \"Permissions.\"2. Add the email address of the people you would like to invite to be able to edit the experience. There are two roles for collaborators:- **Viewer:** Viewers can see the experience but not edit or upload. They need to log in to their Meadow account in the app.- **Editor:** Editors can upload asset bundles, change texts, images, and place the experience. ![alt_text](../images/webapp-permissions.webp \"Permissions\")## PublishSo, you have tested your experience and it works great! Now it's time to publish it to the world. 1. Go to the experience in the web app.2. On the top right, click Publish.3. For an experience to be published it needs to have an image and a description.> **Note:** It is currently not possible to unpublish an experience. If you need to unpublish, contact support.",
    "category": "General"
  },

  {
    "title": "Vibrations",
    "url": "/vibrations/",
    "content": "# Vibrations {#vibrations}Meadow allows you to incorporate haptic feedback into your experiences through vibrations. This feature enhances user interaction by providing tactile responses to various actions or events within your experience.### AvailabilityCurrently, vibration functionality is fully supported on iOS devices. Support for Android devices is planned for future updates. When designing your experience, consider making vibration an optional feature to ensure compatibility across all platforms.## Using Vibrations in Visual ScriptingTo implement vibrations in your Meadow experience, you'll need to use visual scripting nodes. There are four main nodes related to vibrations:### VibrateThis node initiates a vibration with customizable parameters.**Parameters:**- **Amplitude**: `float` - The strength of the vibration (0.0 to 1.0).- **Frequency**: `float` - The frequency of the vibration in hertz.- **Duration**: `float` - The length of the vibration in seconds.### PlayEmphasisThis node plays a quick, emphatic vibration.**Parameters:**- **Amplitude**: `float` - The strength of the emphasis (0.0 to 1.0).- **Frequency**: `float` - The frequency of the emphasis in hertz.### Change FrequencyThis node allows you to modify the frequency of an ongoing vibration. Note that this can only be used after the Vibrate node has been activated.**Parameters:**- **Frequency**: `float` - The new frequency to set for the ongoing vibration.### Change AmplitudeSimilar to Change Frequency, this node lets you adjust the amplitude of an ongoing vibration. It can only be used after the Vibrate node has been activated.**Parameters:**- **Amplitude**: `float` - The new amplitude to set for the ongoing vibration (0.0 to 1.0).## Example UsageHere's are two examples of how you might use the Vibrate node in your visual scripting.### Simple ExampleThis graph will play a 1 second long vibration as the experience starts:![alt_text](../images/vibration-example.webp \"Vibration Node Example\")### Pulsating VibrationTo create a slowly pulsating vibration, you can utilize an animation curve as in the following example:![alt_text](../images/vibration-animation-curve.webp \"Vibration Animation Curve Example\")This graph creates a pulsating vibration effect. Here's how it works:1. The graph starts with a Custom Event, which could be triggered by user interaction or another game event.2. The Vibrate node is called with an initial amplitude of 0, a frequency of 0.5 Hz, and a duration pulled from a graph variable.3. A While Loop is used to continue the vibration effect for the specified duration.4. Inside the loop, an Animation Curve is evaluated over time to create a smooth pulsating effect. This curve likely goes from 0 to 1 and back to 0, creating a wave-like pattern. Make sure the curve only goes between 0 and 1.5. The curve length is one second, therefore we divide the current time by the duration to get a value between 0 and 1.6. The Change Amplitude node is used to continuously update the vibration's amplitude based on the evaluated curve value. This creates the pulsating sensation.7. The loop continues until the specified duration is reached, which is checked using the Less node comparing the current time against the duration.8. Time tracking is handled using the Get Delta Time node and basic math operations to accumulate the total elapsed time.This setup allows for a much more nuanced and dynamic vibration effect compared to a simple, static vibration. The pulsating effect can provide more engaging haptic feedback for various in-experience events or interactions.Remember to test your vibration implementations on actual devices to ensure they provide the intended user experience. Keep in mind that the behavior may vary across different device models and operating systems.### Ideas for Vibration Usage: Invisible Haptic LabyrinthCreate an invisible labyrinth that players navigate solely through vibrations. In this game concept:* The intensity of the vibration increases as players get closer to the walls.* Players lose life when they hit the walls.* Players can collaborate by guiding each other and indicating wall locations.* The screen doesn't need to render any visual content, as this is purely a haptic-based game.Technical Considerations:* The game would need to use Geolocation or Cloud Anchors to align the labyrinth between players.* It should be played in a large, open space without physical obstacles.This concept showcases how vibrations can be used creatively to craft unique, immersive experiences that go beyond traditional visual-based gameplay.",
    "category": "General"
  },

  {
    "title": "Visual Scripting",
    "url": "/visual-scripting/",
    "content": "# Visual Scripting {#visual-scripting}In Meadow you need to use visual scripting for your experience logic. There are plenty of great tutorials online to give you an introduction to visual scripting. Here are two to get you started:* [Unity Visual Scripting – Getting Started](https://www.youtube.com/watch?v=JYkFm1Sc3v8)* [How to do Visual Scripting in Unity!](https://www.youtube.com/watch?v=hcrHmGil_rM)## Meadow specific visual scripting eventsMeadow has a few specific events related to functions in the app that you can make use of in your experiences. Many are related to specific features covered in other parts of the manual, but here are a few general ones:### OnContentInitialized // OnExperienceInitializedThis event is triggered when the experience is initialized and ready for use. It is recommended to initiate your experience in this event rather than `OnStart` to avoid conflicts with the initialization processes of Meadow and the AR subsystems, which occur during `OnStart`.**Parameters:**- `bool`: Indicates whether the initialization was successful (`true`) or not (`false`).### ToggleARUIThis event is triggered when the user toggles the AR user interface. It can be utilized to pause the experience or display a message to the user.**Parameters:**- `bool`: Represents the state of the AR UI; `true` if the UI is open, `false` otherwise.### UserCaptureCreatedThis event is triggered following a user action of taking a picture or recording a video using Meadow's integrated capture functionality. It provides information about the type of capture performed by the user, allowing for appropriate handling of the captured media.**Parameters:**- `CaptureType`: Specifies the capture type, which can be `CaptureType.Photo` for photographs or `CaptureType.Video` for videos, enabling tailored responses to different capture actions.### RepositionStart and RepositionEndThese event is triggered when the positioning system has new information and repositions your experience accordingly. In most cases this is imperceptible to the user.",
    "category": "General"
  }

]
